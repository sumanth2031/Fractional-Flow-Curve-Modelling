import tkinter as tk
from tkinter import messagebox
from scipy.optimize import curve_fit
import numpy as np
import matplotlib.pyplot as plt
from scipy import interpolate

root = tk.Tk()
root.title('Water Flooding')


entry1 = tk.Entry(root)
entry1.grid(row=2, column=2,padx=10, pady=10)
entry2 = tk.Entry(root)
entry2.grid(row=3, column=2,padx=10, pady=10)
entry3 = tk.Entry(root)
entry3.grid(row=4, column=2,padx=10, pady=10)
entry4 = tk.Entry(root)
entry4.grid(row=5, column=2, padx=10, pady=10)
entry5 = tk.Entry(root)
entry5.grid(row=6, column=2,padx=10, pady=10)
entry6 = tk.Entry(root)
entry6.grid(row=7, column=2,padx=10, pady=10)
entry7 = tk.Entry(root)
entry7.grid(row=8, column=2, padx=10, pady=10)
entry8 = tk.Entry(root)
entry8.grid(row=9, column=2, padx=10, pady=10)
entry9 = tk.Entry(root)
entry9.grid(row=10, column=2, padx=10, pady=10)
entry10 = tk.Entry(root)
entry10.grid(row=11, column=2, padx=10, pady=10)
entry11 = tk.Entry(root)
entry11.grid(row=12, column=2, padx=10, pady=10)
entry12 = tk.Entry(root)
entry12.grid(row=13, column=2, padx=10, pady=10)

label2 = tk.Label(root, text='Enter Krw', font=('helvetica', 10)).grid(row=2, columnspan=2,padx=10, pady=10)
label3 = tk.Label(root, text='Enter Kro', font=('helvetica', 10)).grid(row=3, columnspan=2,padx=10, pady=10)
label4 = tk.Label(root, text='Enter Sw ', font=('helvetica', 10)).grid(row=4, columnspan=2,padx=10, pady=10)
label5 = tk.Label(root, text='Enter Injection rate', font=('helvetica', 10)).grid(row=5, columnspan=2,padx=10, pady=10)
label6 = tk.Label(root, text='Enter viscosity of water', font=('helvetica', 10)).grid(row=6, columnspan=2,padx=10, pady=10)
label7 = tk.Label(root, text='Enter viscosity of oil:', font=('helvetica', 10)).grid(row=7, columnspan=2,padx=10, pady=10)
label8 = tk.Label(root, text='Enter Area of reservoir:', font=('helvetica', 10)).grid(row=8, columnspan=2,padx=10, pady=10)
label9 = tk.Label(root, text='Enter Length of reservoir:', font=('helvetica', 10)).grid(row=9, columnspan=2,padx=10, pady=10)
label10 = tk.Label(root, text='Enter Porosity', font=('helvetica', 10)).grid(row=10, columnspan=2,padx=10, pady=10)
label11 = tk.Label(root, text='Enter Swi', font=('helvetica', 10)).grid(row=11, columnspan=2,padx=10, pady=10)
label12 = tk.Label(root, text='Enter Time', font=('helvetica', 10)).grid(row=12, columnspan=2,padx=10, pady=10)
label13 = tk.Label(root, text='Enter Sor', font=('helvetica', 10)).grid(row=13, columnspan=2,padx=10, pady=10)
global krw
krw = []
global kro
kro = []
global Sw
Sw = []
global uo


def getkrw():
    x1 = float(entry1.get())
    krw.append(x1)
    print(krw)
    entry1.delete(0, 'end')


def getkro():
    x2 = float(entry2.get())
    kro.append(x2)
    print(kro)
    entry2.delete(0, 'end')


def getSw():
    x3 = float(entry3.get())
    Sw.append(x3)
    entry3.delete(0, 'end')


def getuw():
    k1 = float(entry5.get())
    global uw
    uw = k1
    entry5.delete(0, 'end')


def getuo():
    global uo
    uo = float(entry6.get())
    entry6.delete(0, 'end')


def inj():
    global iw
    iw = float(entry4.get())
    entry4.delete(0, 'end')


def Area():
    global A
    A = float(entry7.get())
    entry7.delete(0, 'end')


def length():
    global l
    l = float(entry8.get())
    entry8.delete(0, 'end')


def poro():
    global por
    por = float(entry9.get())
    entry9.delete(0, 'end')


def getswi():
    global p
    p = float(entry10.get())
    entry10.delete(0, 'end')


def gettime():
    global t
    t = float(entry11.get())
    entry11.delete(0, 'end')


def getsro():
    global Sro
    Sro = float(entry12.get())
    entry12.delete(0, 'end')

def deriv(f, x, *popt):
        h = 0.0000000001
        return (f(x + h, *popt) - f(x, *popt)) / h

def sigmoid(x, L, t, k, b):
        y = L / (1 + np.exp(-k * (x - t))) + b
        return (y)

def get_min_x(popt):  # returns the saturation at maximum slope
        max_slope = -99
        for i in np.linspace(0, 1, 100):
            s = deriv(sigmoid, i, *popt)
            if s > max_slope:
                max_slope = s
                x_min = i  # x_min is the saturation at maximum slope
        print("Max slope:", max_slope)
        return x_min

def get_x_y(p, x_min, popt):  # returns breakthrough saturation and Fw
        min = 9999
        for i in np.linspace(x_min, 1, 10000):
            j = sigmoid(i, *popt)
            s = deriv(sigmoid, i, *popt)
            v = i - j / s
            k = abs(v - p)
            if min > k:
                min = k
                t_x, t_y = i, j  # t_x is Swf & t_y is Fwf
        return t_x, t_y

def check():
    n1 = len(krw)
    for i in range(n1):
        if 0 <= krw[i] < 1:
            continue
        else:
            messagebox.showerror("Error", "Invalid entry")
    n2 = len(kro)
    for i in range(n2):
        if (0 <= kro[i] < 1):
            continue
        else:
            messagebox.showerror("Error", "Invalid entry")
    n3 = len(Sw)
    for i in range(n3):
        if (0 <= Sw[i] <= 1):
            continue
        else:
            messagebox.showerror("Error", "Invalid entry")

    if (n1 != n2 or n1 != n3 or n2 != n3):
        messagebox.showerror("Error", 'Invalid entries')
    if (kro[i] + krw[i] >= 1):
        messagebox.showerror(("Error", "Invalid entries"))


def getvalues():
    fw =[]
    for i in range(len(kro)):
        if(krw[i]==0):
            fw.append(0)
        else:
         fw.append(1 / (1 + (kro[i] * uw) / (krw[i] * uo)))
    xdata = Sw
    ydata = fw
    from scipy import interpolate
    p0 = [max(ydata), np.median(xdata), 1, np.min(fw)]
    popt, pcov = curve_fit(sigmoid, xdata, ydata, p0)

    x_min = get_min_x(popt)  # here we got Sw at max. slope

    x, y = get_x_y(p, x_min, popt)  # here we satrted from max. slope Sw to 1  to find tangency point (Swf)
    print("p =", p)  # initial water saturation
    print("(x,y) = ", (x, y))  # Swf and Fwf
    label14 = tk.Label(root, text='Swf', font=('helvetica', 10),
                       bg='white').grid(row=17, column=1, padx=10, pady=10)

    label15 = tk.Label(root, text=x, font=('helvetica', 10), ).grid(row=17, column=2, padx=10, pady=10)

    fig = plt.figure()
    ax = fig.gca()
    ax.set_xticks(np.arange(p, 1, 0.1))

    plt.scatter(xdata, ydata, color='b')
    sl = (y) / (x - p)
    t = np.linspace(p, 1, 10)
    plt.plot(t, sl * (t - p))

    plt.plot(xdata, sigmoid(xdata, *popt), 'r-')
    plt.grid(True)
    plt.show()
def getwi():
    fw =[]
    for i in range(len(kro)):
        if(krw[i]==0):
            fw.append(0)
        else:
         fw.append(1 / (1 + (kro[i] * uw) / (krw[i] * uo)))
    xdata = Sw
    ydata = fw
    p0 = [max(ydata), np.median(xdata), 1, np.min(fw)]
    popt, pcov = curve_fit(sigmoid, xdata, ydata, p0)
    x_min = get_min_x(popt)
    x, y = get_x_y(p, x_min, popt)
    PV = (por * A * l)
    print("Pore Volume:", PV)
    slope_bt = deriv(sigmoid, x, *popt)
    Wi = PV / slope_bt
    print("Water injected at the time of breakthrough:", Wi)
    tbt = (Wi / iw)
    print("time required for breakthrough:", tbt)
    xswf = (5.615 * iw * tbt * slope_bt / (por * A))
    print("Dimensionless distance:", xswf)
    vswf = (5.615 * iw * slope_bt / (por * A))
    print("Velocity of breakthrough:", vswf)
    label16 = tk.Label(root, text='Water injected at the time of breakthrough:', font=('helvetica', 10),bg ='white').grid(row=18,column=1,padx=10, pady=10)

    label17 = tk.Label(root, text=Wi, font=('helvetica', 10),).grid(row=18, column=2,padx=10, pady=10)
    label18 = tk.Label(root, text='Time required for breakthrough:', font=('helvetica', 10), bg ='white').grid(row=19, column=1,padx=10, pady=10)
    label19 = tk.Label(root, text=tbt, font=('helvetica', 10)).grid(row=19, column=2,padx=10, pady=10)
    label20 = tk.Label(root, text='Dimensionaless distance:', font=('helvetica', 10), bg ='white').grid(row=20, column=1,padx=10, pady=10)
    label21 = tk.Label(root, text=xswf, font=('helvetica', 10)).grid(row=20, column=2,padx=10, pady=10)
    label22 = tk.Label(root, text='velocity of breakthrough:', font=('helvetica', 10), bg ='white').grid(row=21, column=1,padx=10, pady=10)
    label23 = tk.Label(root, text=vswf, font=('helvetica', 10)).grid(row=21, column=2,padx=10, pady=10)

def getswvsx():
    fw =[]
    for i in range(len(kro)):
        if(krw[i]==0):
            fw.append(0)
        else:
         fw.append(1 / (1 + (kro[i] * uw) / (krw[i] * uo)))
    xdata = Sw
    ydata = fw
    p0 = [max(ydata), np.median(xdata), 1, np.min(fw)]
    popt, pcov = curve_fit(sigmoid, xdata, ydata, p0)
    x_min = get_min_x(popt)
    x, y = get_x_y(p, x_min, popt)
    slope_bt = deriv(sigmoid, x, *popt)
    PV = (por * A * l)
    Wi = PV / slope_bt
    tbt = (Wi / iw)
    z1 = Sro
    alist = []
    blist = []
    for i in Sw:
        if (p <= i < x):
            alist.append(i)
        if (x < i < 1 - z1):
            blist.append(i)
    alist.append(x)
    blist.append(1 - z1)
    flist = alist + blist
    clist = []
    dlist = []
    for i in alist:
        clist.append(deriv(sigmoid, x, *popt))
    for i in blist:
        dlist.append(deriv(sigmoid, i, *popt))
    elist = clist + dlist

    x_d = []
    if (t > tbt):
        messagebox.showerror("Error", "Invalid entry")
    else:
        for i in elist:
            x_d.append((5.615 * iw * t * i) / (por * A))

    print(flist)
    plt.plot(x_d, flist)
    plt.show()




button1 = tk.Button(text='save', command=getkrw).grid(row=2, column=3, padx=10, pady=10)
button2 = tk.Button(text='save', command=getkro).grid(row=3, column=3, padx=10, pady=10)
button3 = tk.Button(text='save', command=getSw).grid(row=4, column=3, padx=10, pady=10)
button4 = tk.Button(text='save', command=inj).grid(row=5, column=3, padx=10, pady=10)
button5 = tk.Button(text='save', command=getuw).grid(row=6, column=3, padx=10, pady=10)
button6 = tk.Button(text='save', command=getuo).grid(row=7, column=3, padx=10, pady=10)
button7 = tk.Button(text='save', command=Area).grid(row=8, column=3, padx=10, pady=10)
button8 = tk.Button(text='save', command=length).grid(row=9, column=3, padx=10, pady=10)
button9 = tk.Button(text='save', command=poro).grid(row=10, column=3, padx=10, pady=10)
button10 = tk.Button(text='save', command=getswi).grid(row=11, column=3, padx=10, pady=10)
button11 = tk.Button(text='save', command=gettime).grid(row=12, column=3, padx=10, pady=10)
button12 = tk.Button(text='save', command=getsro).grid(row=13, column=3, padx=10, pady=10)

button13 = tk.Button(text='Sw vs Fw ', command=getvalues, bg ='light blue').grid(row=15, column=2, padx=10, pady=10)
button14 = tk.Button(text='CHECK', command=check, bg ='light green').grid(row=14, column=2,padx=20, pady=10)
button15 = tk.Button(text='Get Wi', command=getwi,bg ='light blue').grid(row=15, column=1,padx=20, pady=10)
button16 = tk.Button(text='Sw vs X', command=getswvsx,bg ='light blue').grid(row=15, column=3,padx=20, pady=10)

root.mainloop()
